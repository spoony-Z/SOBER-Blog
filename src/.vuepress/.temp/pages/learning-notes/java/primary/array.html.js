export const data = JSON.parse("{\"key\":\"v-428e89d6\",\"path\":\"/learning-notes/java/primary/array.html\",\"title\":\"数组、排序、查找\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"数组、排序、查找 数组 介绍 数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型 演示 /** * double[] 表示 是double类型的数组，数组名为 hens * {3, 5, 1, 3.4, 2, 50} 表示数组的值/元素 */ double[] hens = {3, 5, 1, 3.4, 2, 50}; /** * 遍历数组得到数组的所有元素的和， 使用for * hens.length 为该数组长度 */ for(int i = 0; i &lt; hens.length; i++){ System.out.println(\\\"第\\\" + (i + 1) + \\\"个元素的值\\\" + hens[i]); }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/learning-notes/java/primary/array.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"SOBER\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"数组、排序、查找\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"数组、排序、查找 数组 介绍 数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型 演示 /** * double[] 表示 是double类型的数组，数组名为 hens * {3, 5, 1, 3.4, 2, 50} 表示数组的值/元素 */ double[] hens = {3, 5, 1, 3.4, 2, 50}; /** * 遍历数组得到数组的所有元素的和， 使用for * hens.length 为该数组长度 */ for(int i = 0; i &lt; hens.length; i++){ System.out.println(\\\"第\\\" + (i + 1) + \\\"个元素的值\\\" + hens[i]); }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://mister-hope.github.io/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"数组、排序、查找\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"SOBER\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"数组、排序、查找\\\",\\\"image\\\":[\\\"https://mister-hope.github.io/\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"SOBER\\\",\\\"url\\\":\\\"https://mrhope.site\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"数组\",\"slug\":\"数组\",\"link\":\"#数组\",\"children\":[{\"level\":3,\"title\":\"介绍\",\"slug\":\"介绍\",\"link\":\"#介绍\",\"children\":[]},{\"level\":3,\"title\":\"演示\",\"slug\":\"演示\",\"link\":\"#演示\",\"children\":[]},{\"level\":3,\"title\":\"使用方式\",\"slug\":\"使用方式\",\"link\":\"#使用方式\",\"children\":[]},{\"level\":3,\"title\":\"注意事项和细节\",\"slug\":\"注意事项和细节\",\"link\":\"#注意事项和细节\",\"children\":[]},{\"level\":3,\"title\":\"案例\",\"slug\":\"案例\",\"link\":\"#案例\",\"children\":[]},{\"level\":3,\"title\":\"数组的赋值机制\",\"slug\":\"数组的赋值机制\",\"link\":\"#数组的赋值机制\",\"children\":[]},{\"level\":3,\"title\":\"数组拷贝\",\"slug\":\"数组拷贝\",\"link\":\"#数组拷贝\",\"children\":[]},{\"level\":3,\"title\":\"数组的反转\",\"slug\":\"数组的反转\",\"link\":\"#数组的反转\",\"children\":[]},{\"level\":3,\"title\":\"数组添加\",\"slug\":\"数组添加\",\"link\":\"#数组添加\",\"children\":[]}]},{\"level\":2,\"title\":\"排序\",\"slug\":\"排序\",\"link\":\"#排序\",\"children\":[]},{\"level\":2,\"title\":\"查找\",\"slug\":\"查找\",\"link\":\"#查找\",\"children\":[{\"level\":3,\"title\":\"介绍\",\"slug\":\"介绍-1\",\"link\":\"#介绍-1\",\"children\":[]}]},{\"level\":2,\"title\":\"多维数组\",\"slug\":\"多维数组\",\"link\":\"#多维数组\",\"children\":[]}],\"readingTime\":{\"minutes\":4.37,\"words\":1311},\"filePathRelative\":\"learning-notes/java/primary/array.md\",\"excerpt\":\"<h1> 数组、排序、查找</h1>\\n<h2> 数组</h2>\\n<h3> 介绍</h3>\\n<p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是<strong>引用类型</strong></p>\\n<h3> 演示</h3>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"shiki one-dark-pro\\\" style=\\\"background-color: #282c34\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\">/**</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * double[] 表示 是double类型的数组，数组名为 hens</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * {3, 5, 1, 3.4, 2, 50} 表示数组的值/元素</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> */</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #C678DD\\\">double</span><span style=\\\"color: #E06C75\\\">[] hens </span><span style=\\\"color: #56B6C2\\\">=</span><span style=\\\"color: #E06C75\\\"> {</span><span style=\\\"color: #D19A66\\\">3</span><span style=\\\"color: #ABB2BF\\\">,</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #D19A66\\\">5</span><span style=\\\"color: #ABB2BF\\\">,</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #D19A66\\\">1</span><span style=\\\"color: #ABB2BF\\\">,</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #D19A66\\\">3.4</span><span style=\\\"color: #ABB2BF\\\">,</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #D19A66\\\">2</span><span style=\\\"color: #ABB2BF\\\">,</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #D19A66\\\">50</span><span style=\\\"color: #E06C75\\\">}</span><span style=\\\"color: #ABB2BF\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\">/**</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * 遍历数组得到数组的所有元素的和， 使用for</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> * hens.length 为该数组长度</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #7F848E; font-style: italic\\\"> */</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #C678DD\\\">for</span><span style=\\\"color: #E06C75\\\">(</span><span style=\\\"color: #C678DD\\\">int</span><span style=\\\"color: #E06C75\\\"> i </span><span style=\\\"color: #56B6C2\\\">=</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #D19A66\\\">0</span><span style=\\\"color: #ABB2BF\\\">;</span><span style=\\\"color: #E06C75\\\"> i </span><span style=\\\"color: #56B6C2\\\">&lt;</span><span style=\\\"color: #E06C75\\\"> </span><span style=\\\"color: #E5C07B\\\">hens</span><span style=\\\"color: #ABB2BF\\\">.</span><span style=\\\"color: #E5C07B\\\">length</span><span style=\\\"color: #ABB2BF\\\">;</span><span style=\\\"color: #E06C75\\\"> i</span><span style=\\\"color: #ABB2BF\\\">++</span><span style=\\\"color: #E06C75\\\">){</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #E06C75\\\">    </span><span style=\\\"color: #E5C07B\\\">System</span><span style=\\\"color: #ABB2BF\\\">.</span><span style=\\\"color: #E5C07B\\\">out</span><span style=\\\"color: #ABB2BF\\\">.</span><span style=\\\"color: #61AFEF\\\">println</span><span style=\\\"color: #ABB2BF\\\">(</span><span style=\\\"color: #98C379\\\">\\\"第\\\"</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #56B6C2\\\">+</span><span style=\\\"color: #ABB2BF\\\"> (i </span><span style=\\\"color: #56B6C2\\\">+</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #D19A66\\\">1</span><span style=\\\"color: #ABB2BF\\\">) </span><span style=\\\"color: #56B6C2\\\">+</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #98C379\\\">\\\"个元素的值\\\"</span><span style=\\\"color: #ABB2BF\\\"> </span><span style=\\\"color: #56B6C2\\\">+</span><span style=\\\"color: #ABB2BF\\\"> hens[i]);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color: #E06C75\\\">}</span></span>\\n<span class=\\\"line\\\"></span></code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
